{"ast":null,"code":"export function calculateDailyPoints() {\n  const today = new Date();\n  const month = today.getMonth(); // 0-indexed\n  const day = today.getDate();\n\n  // Example: defining seasons by month\n  const seasonStartMonths = {\n    spring: 2,\n    summer: 5,\n    autumn: 8,\n    winter: 11\n  };\n  let seasonStart = new Date(today.getFullYear(), 2, 1); // default: Spring\n  Object.values(seasonStartMonths).forEach(m => {\n    const tempDate = new Date(today.getFullYear(), m, 1);\n    if (today >= tempDate) seasonStart = tempDate;\n  });\n  const dayOfSeason = Math.floor((today.getTime() - seasonStart.getTime()) / (1000 * 3600 * 24)) + 1;\n  let points = 2;\n  if (dayOfSeason === 2) points = 3;else if (dayOfSeason > 2) {\n    let prevPrev = 2;\n    let prev = 3;\n    for (let i = 3; i <= dayOfSeason; i++) {\n      const current = Math.round(prevPrev + prev * 0.6);\n      prevPrev = prev;\n      prev = current;\n      points = current;\n    }\n  }\n  return points >= 1000 ? `${Math.round(points / 1000)}k` : points.toString();\n}","map":{"version":3,"names":["calculateDailyPoints","today","Date","month","getMonth","day","getDate","seasonStartMonths","spring","summer","autumn","winter","seasonStart","getFullYear","Object","values","forEach","m","tempDate","dayOfSeason","Math","floor","getTime","points","prevPrev","prev","i","current","round","toString"],"sources":["C:/Users/Nicolas/Desktop/Nicolas/Documents/wallet-app/src/utils/calculatePoints.ts"],"sourcesContent":["export function calculateDailyPoints(): string {\r\n    const today = new Date();\r\n    const month = today.getMonth(); // 0-indexed\r\n    const day = today.getDate();\r\n  \r\n    // Example: defining seasons by month\r\n    const seasonStartMonths = { spring: 2, summer: 5, autumn: 8, winter: 11 };\r\n  \r\n    let seasonStart = new Date(today.getFullYear(), 2, 1); // default: Spring\r\n    Object.values(seasonStartMonths).forEach((m) => {\r\n      const tempDate = new Date(today.getFullYear(), m, 1);\r\n      if (today >= tempDate) seasonStart = tempDate;\r\n    });\r\n  \r\n    const dayOfSeason = Math.floor(\r\n      (today.getTime() - seasonStart.getTime()) / (1000 * 3600 * 24)\r\n    ) + 1;\r\n  \r\n    let points = 2;\r\n    if (dayOfSeason === 2) points = 3;\r\n    else if (dayOfSeason > 2) {\r\n      let prevPrev = 2;\r\n      let prev = 3;\r\n      for (let i = 3; i <= dayOfSeason; i++) {\r\n        const current = Math.round(prevPrev + prev * 0.6);\r\n        prevPrev = prev;\r\n        prev = current;\r\n        points = current;\r\n      }\r\n    }\r\n  \r\n    return points >= 1000 ? `${Math.round(points / 1000)}k` : points.toString();\r\n  }"],"mappings":"AAAA,OAAO,SAASA,oBAAoBA,CAAA,EAAW;EAC3C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,KAAK,GAAGF,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMC,GAAG,GAAGJ,KAAK,CAACK,OAAO,CAAC,CAAC;;EAE3B;EACA,MAAMC,iBAAiB,GAAG;IAAEC,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC;EAEzE,IAAIC,WAAW,GAAG,IAAIV,IAAI,CAACD,KAAK,CAACY,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACvDC,MAAM,CAACC,MAAM,CAACR,iBAAiB,CAAC,CAACS,OAAO,CAAEC,CAAC,IAAK;IAC9C,MAAMC,QAAQ,GAAG,IAAIhB,IAAI,CAACD,KAAK,CAACY,WAAW,CAAC,CAAC,EAAEI,CAAC,EAAE,CAAC,CAAC;IACpD,IAAIhB,KAAK,IAAIiB,QAAQ,EAAEN,WAAW,GAAGM,QAAQ;EAC/C,CAAC,CAAC;EAEF,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAC5B,CAACpB,KAAK,CAACqB,OAAO,CAAC,CAAC,GAAGV,WAAW,CAACU,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE,CAC/D,CAAC,GAAG,CAAC;EAEL,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIJ,WAAW,KAAK,CAAC,EAAEI,MAAM,GAAG,CAAC,CAAC,KAC7B,IAAIJ,WAAW,GAAG,CAAC,EAAE;IACxB,IAAIK,QAAQ,GAAG,CAAC;IAChB,IAAIC,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,WAAW,EAAEO,CAAC,EAAE,EAAE;MACrC,MAAMC,OAAO,GAAGP,IAAI,CAACQ,KAAK,CAACJ,QAAQ,GAAGC,IAAI,GAAG,GAAG,CAAC;MACjDD,QAAQ,GAAGC,IAAI;MACfA,IAAI,GAAGE,OAAO;MACdJ,MAAM,GAAGI,OAAO;IAClB;EACF;EAEA,OAAOJ,MAAM,IAAI,IAAI,GAAG,GAAGH,IAAI,CAACQ,KAAK,CAACL,MAAM,GAAG,IAAI,CAAC,GAAG,GAAGA,MAAM,CAACM,QAAQ,CAAC,CAAC;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}